#+Title: Aner's Emacs Configuration
#+property: header-args :results silent
#+options: toc:2
#+latex_class: article

* Base Configuration
 
** Package installation with straight and use-package

Installation of all required packages.

Straight initialization found [[https://www.github.com/raxod502/straight.el][here]]

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq vc-follow-symlinks t)
#+end_src

Install use-package

Installation of usepackage taken from [[https://github.com/KaratasFurkan/.emacs.d/][KaratasFurkan's generously shared emacs config]].

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

** Backup files

Taken from [[https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][this post on StackOverflow]]

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.cache/emacs-backups/"))
      backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+end_src

  
Load all the packages that define the work environment.
  
** EVIL mode

#+begin_src emacs-lisp
(use-package evil
  :config
      (require 'evil )
      (evil-mode 1)
  )
#+end_src

** IVY
   
Enabling IVY. Taken from [[https://github.com/abo-abo/swiper][their website]].

#+begin_src emacs-lisp
(use-package ivy
  :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "(%d/%d) ")
  :config
    (ivy-mode 1)
)

(use-package ivy-hydra
  :after ivy)
(use-package ivy-avy
  :after ivy)
(use-package counsel
  :after ivy)
#+end_src

*** Keymaps

Binding C-j C-k to movement inside counsel menus.
Rebinding for switching buffer C-d to kill instead of C-k because of conflict

#+begin_src emacs-lisp
(define-key visual-line-mode-map (kbd "C-k") nil)
(define-key ivy-switch-buffer-map (kbd "C-k") nil)

(define-key ivy-switch-buffer-map (kbd "C-d") 'ivy-switch-buffer-kill)

(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :config
    (projectile-mode +1)
  :bind
    (:map projectile-command-map
          ("a" . projectile-add-known-project)
    )
)
#+end_src

Ivy for projectile:
Parts taken from [[https://emacs.stackexchange.com/questions/40787/display-corresponding-key-binding-of-command-during-m-x-completion][this post]] and [[https://emacs.stackexchange.com/questions/38841/counsel-m-x-always-shows][this post]] from StackOverflow.

#+begin_src emacs-lisp
(use-package counsel-projectile
  :config
    (counsel-projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    ;Making counsel start with empty regex
    (when (commandp 'counsel-M-x)
        (global-set-key [remap execute-extended-command] 'counsel-M-x))
    (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
)
#+end_src

Persp projectile

#+begin_src emacs-lisp
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Tramp

#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :custom
    (tramp-verbose 6)
)
#+end_src

** YASnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :config
    (yas-global-mode 1)
)
#+end_src

** Flycheck
   
Must set up

#+begin_src emacs-lisp
(use-package flycheck
  :config
    (global-flycheck-mode 1)
)
#+end_src

* Text
** Text font

Setting font size to 10. The value to place is font-size * 10

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "LiberationMono" :height 100)
(set-face-attribute 'variable-pitch nil
     :font "Cantarell"
     :height 120
     :weight 'normal
     :width 'normal)

(set-face-attribute 'fixed-pitch nil
     :font "LiberationMono"
     :height 100
     :weight 'normal
     :width 'normal)
#+end_src

** Line numbering
#+begin_src emacs-lisp
(setq display-line-numbers-type 'visual
      display-line-numbers-grow-only 1
      display-line-numbers-width-start 1)

;Getting rid of linum on terminal type buffers
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+end_src

** Line highlight
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Line wrap
 #+begin_src emacs-lisp
(global-visual-line-mode t)
 #+end_src
 
** Parenthesis
Highlight matching parenthesis
 #+begin_src emacs-lisp
(show-paren-mode 1)
 #+end_src

** Tabs
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq c-basic-offset 4)
(setq tab-always-indent 'complete)
#+end_src

** BIDI and lang

#+begin_src emacs-lisp
(setq-default default-input-method "hebrew"
              bidi-display-reordering t
              bidi-paragraph-direction 'nil)

(defun set-bidi-env ()
  (setq bidi-paragraph-direction 'nil))

(defun set-left-justify-env ()
  (setq-local bidi-paragraph-direction 'left-to-right))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'set-bidi-env) ;Because org-mode thinks its special
(add-hook 'minibuffer-inactive-mode-hook 'set-left-justify-env) ;So the mini-mode-line doesn't change sides
#+end_src

* Major modes

** VTerm

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

** PDF-Tools

For viewing PDF files and such!
Broken for the time being
#+begin_src emacs-lisp
(use-package pdf-tools
  :config
    (pdf-tools-install)
)
#+end_src

*** Stop the blinking on PDF-View-Mode

Taken from [[https://github.com/munen/emacs.d/blob/master/configuration.org][Munen's configuration on GitHub]].
When using evil-mode and pdf-tools and looking at a zoomed PDF, it will blink, because the cursor blinks.
This configuration disables this whilst retaining the blinking cursor in other modes.
Disabled for now
#+begin_src emacs-lisp
;(evil-set-initial-state 'pdf-view-mode 'emacs)
;(add-hook 'pdf-view-mode-hook
;  (lambda ()
;    (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
#+end_src

** ORG
   
All things org!

#+begin_src emacs-lisp
(defun set-org-mode-fixed-pitch-faces ()
  (mapc (lambda (face) (set-face-attribute face nil 
                            :font (face-attribute 'fixed-pitch :font)
                            :height (face-attribute 'fixed-pitch :height)
                       )
        )
        `(line-number
          org-block
          org-special-keyword
          org-drawer
          org-todo
          org-done
          org-priority
          org-checkbox
          org-block-end-line
          org-block-begin-line
          org-table org-verbatim)))

(use-package org
  :straight
  (:type built-in)
  :hook
  (org-mode . variable-pitch-mode)
  :config
  (set-org-mode-fixed-pitch-faces)
)

#+end_src

#+begin_src emacs-lisp

(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

#+end_src

*** Babel

Define languages to use 

#+begin_src emacs-lisp
(require 'ob)
(require 'ob-tangle)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (emacs-lisp . t)
   (python . t)
   (org . t)
   (lilypond . t)
   (latex . t)
   (js . t)
   (java . t)
   (dot . t)
   (C . t)))

(add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
(add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
#+end_src

*** Code blocks

The following displays the contents of code blocks in Org-mode files using
the major-mode of the code. It also changes the behavior of TAB to as if it
were used in the appropriate major mode.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation 1)

#+end_src

*** HTML Preview

#+begin_src emacs-lisp
;(use-package org-preview-html)
(use-package htmlize)
#+end_src

*** PDF Preview

#+begin_src emacs-lisp
;(use-package latex-preview-pane)
#+end_src

*** PDF exporting
    
#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
#+end_src

Creating classes

#+begin_src emacs-lisp
(setq org-latex-classes
     '(
        ("article"
"\\documentclass{article}
[DEFAULT-PACKAGES]
\\usepackage{polyglossia}
\\usepackage[cache=false]{minted}
\\usepackage{xcolor}
\\usepackage{indentfirst}
\\usepackage{amsfonts}
\\usepackage{amsmath}
\\definecolor{codebg}{rgb}{0.95,0.95,0.95}
\\setdefaultlanguage{english}
\\setlength{\\parindent}{0in}

\\setminted{
    bgcolor=codebg,
    breaklines=true,
    mathescape,
    fontsize=\\scriptsize,
    linenos=false,
}
\\newfontfamily\\hebrewfont{LiberationSans}[Script=Hebrew]
\\setotherlanguage{hebrew}
"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
        )
      )
    )

(setq org-export-with-toc nil)
(setq org-export-with-section-numbers nil)
#+end_src

*** Fixing previews for things with polygloss
#+begin_src emacs-lisp
;(setq-default org-preview-latex-process-alist (car(get 'standard-value 'org-preview-latex-process-alist)))

;Filtering out Hebrew from latex fragments
(defun my-latex-filter-nolang (text backend info)
  "No language in latex fragment exports"
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "aner" "cheese" text)))
#+end_src

#+begin_src emacs-lisp
;(add-to-list 'org-export-filter-latex-fragment-functions 'my-latex-filter-nolang)
#+end_src

This should render Hebrew text.

#+begin_export latex
\begin{hebrew}
#+end_export
זה אמור לעבוד
#+begin_export latex
\end{hebrew}
#+end_export

*** Org block highlighting

#+begin_src emacs-lisp
;Set for solarized theme
;(set-face-background 'org-block-begin-line "#FFF3D6")
;(set-face-background 'org-block-end-line "#FFF3D6")
;(set-face-background 'org-block (face-attribute 'default :background))
(use-package color)
#+end_src

*** Python version

#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
#+end_src

*** Async blocks

#+begin_src emacs-lisp
(use-package ob-async
  :config
    ;Setting command of async blocks to Python3
    (add-hook 'ob-async-pre-execute-src-block-hook
            '(lambda ()
            (setq org-babel-python-command "python3")
    ))
)
#+end_src

*** Inline images

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)

(defun shk-fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

(with-eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'shk-fix-inline-images))
#+end_src

*** Snippets
    
Want to create snippets for latex insertion.
There is one template for inline and one template for standalone latex snippets.
Each template is defind by two templates. One for other langauges and one for standard
input. This is done to toggle back to the original language once done with the
function toggle-input-method.

#+begin_src emacs-lisp

(defun dumb-toggle-input-method () 
    (if current-input-method (toggle-input-method))
)
;Inline
(yas-define-snippets 'org-mode (list (list 
                                      nil
                                      "\$$1\$$0"
                                      "ORG_LATEX_INLINE_SNIPPET_ENG"
                                      '(not (eval current-input-method))
                                      nil
                                      nil
                                      nil
                                      "C-l"
                                      nil
                                      nil
                                      )))

(yas-define-snippets 'org-mode (list (list 
                                      nil
                                      "\$$1\$$0"
                                      "ORG_LATEX_INLINE_SNIPPET_OTHER_LANG"
                                      '(eval current-input-method)
                                      nil
                                      '((unused (dumb-toggle-input-method))
                                        (yas-after-exit-snippet-hook 'toggle-input-method))
                                      nil
                                      "C-l"
                                      nil
                                      nil
                                      )))

;Not inline
(yas-define-snippets 'org-mode (list (list 
                                      nil
                                      "\n\n\$\$$1\$\$\n\n$0"
                                      "ORG_LATEX_OUTLINE_SNIPPET_ENG"
                                      '(not (eval current-input-method))
                                      nil
                                      nil
                                      nil
                                      "C-S-l"
                                      nil
                                      nil
                                      )))
(yas-define-snippets 'org-mode (list (list 
                                      nil
                                      "\n\n\$\$$1\$\$\n\n$0"
                                      "ORG_LATEX_OUTLINE_SNIPPET_OTHER_LANG"
                                      '(eval current-input-method)
                                      nil
                                      '((unused (dumb-toggle-input-method))
                                        (yas-after-exit-snippet-hook 'toggle-input-method))
                                      nil
                                      "C-S-l"
                                      nil
                                      nil
)))
#+end_src

*** REVAL

#+begin_src emacs-lisp

(use-package ox-reveal
  :custom
    (org-reveal-root "https://revealjs.com/")
) 

#+end_src

*** Useful to remember

To preview latex fragment as image embedded in text
#+begin_example
org-toggle-latex-fragment
#+end_example

*** Binding

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-a") nil)
(define-key org-mode-map (kbd "C-a l") 'org-toggle-latex-fragment)
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** CMake

#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src

** YAML

#+begin_src emacs-lisp

(use-package yaml-mode)

#+end_src
  
** Irony-mode

#+begin_src emacs-lisp
;; == irony-mode ==
(use-package irony
  :ensure t
  :defer t
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  :config
  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )

;; == company-mode ==
(use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-irony :ensure t :defer t)
  (setq company-idle-delay              nil
	company-minimum-prefix-length   2
	company-show-numbers            t
	company-tooltip-limit           20
	company-dabbrev-downcase        nil
	company-backends                '((company-irony company-gtags))
	)
  :bind ("C-;" . company-complete-common)
  :hook (irony-mode . company-mode)
  )

(use-package flycheck-irony
  :after flycheck
  :config
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
    (add-hook 'c++-mode-hook (lambda () (setq flycheck-checker 'irony)))
)
#+end_src

* UI
** EXWM

We execute the following code only if started with EXWM argument
#+begin_src emacs-lisp
(defun anerenv-load-exwm(switch)
(progn
#+end_src

#+begin_src emacs-lisp
(use-package exwm)
#+end_src

Turn on `display-time-mode' if you don't use an external bar.
#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(display-time-mode t)
#+end_src

You are strongly encouraged to enable something like `ido-mode' to alter
the default behavior of 'C-x b', or you will take great pains to switch
to or back from a floating frame (remember 'C-x 5 o' if you refuse this
proposal however).
You may also want to call `exwm-config-ido' later (see below).
#+begin_src emacs-lisp
(ido-mode 1)
#+end_src

Emacs server is not required to run EXWM but it has some interesting uses
(see next section).
#+begin_src emacs-lisp
(server-start)
#+end_src

Load EXWM.
#+begin_src emacs-lisp
(require 'exwm)
#+end_src

Fix problems with Ido (if you use it).
#+begin_src emacs-lisp
(require 'exwm-config)
(exwm-config-ido)
#+end_src

;; Set the initial number of workspaces (they can also be created later).
#+begin_src emacs-lisp
(setq exwm-workspace-number 4)
#+end_src

All buffers created in EXWM mode are named "*EXWM*". You may want to
change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
are run when a new X window class name or title is available.  Here's
some advice on this topic:
+ Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
+ For applications with multiple windows (e.g. GIMP), the class names of
  all windows are probably the same.  Using window titles for them makes
  more sense.
In the following example, we use class names for all windows except for
Java applications and GIMP.
#+begin_src emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))
#+end_src

Global keybindings can be defined with `exwm-input-global-keys'.
Here are a few examples:
#+begin_src emacs-lisp
(setq exwm-input-global-keys
      `(
        ;; Bind "s-r" to exit char-mode and fullscreen mode.
        ([?\s-r] . exwm-reset)
        ;; Bind "s-w" to switch workspace interactively.
        ([?\s-w] . exwm-workspace-switch)
        ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))
        ;; Bind "s-&" to launch applications ('M-&' also works if the output
        ;; buffer does not bother you).
        ([?\s-&] . (lambda (command)
		     (interactive (list (read-shell-command "$ ")))
		     (start-process-shell-command command nil command)))
        ;; Bind "s-<f2>" to "slock", a simple X display locker.
        ([s-f2] . (lambda ()
		    (interactive)
		    (start-process "" nil "/usr/bin/slock")))
        ([\s-<tab>] . persp-next)
        ))
#+end_src

To add a key binding only available in line-mode, simply define it in
`exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
#+begin_src emacs-lisp
(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
#+end_src

;; The following example demonstrates how to use simulation keys to mimic
;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
;; and DEST is what EXWM actually sends to application.  Note that both SRC
;; and DEST should be key sequences (vector or string).
#+begin_src emacs-lisp
(setq exwm-input-simulation-keys
      '(
        ;; movement
        ([?\C-b] . [left])
        ([?\M-b] . [C-left])
        ([?\C-f] . [right])
        ([?\M-f] . [C-right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-a] . [home])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ([?\C-k] . [S-end delete])
        ;; cut/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))
#+end_src

Enabling randr

Partially from [[https://github.com/ch11ng/exwm/issues/202][here]]. (All commented out now)

#+begin_src emacs-lisp
(require 'exwm-randr)
;(setq exwm-randr-workspace-output-plist '(0 "VGA1"))

;; (defun my-exwm-xrandr-hook ()
;; (interactive)
;; (let* ((connected-cmd "xrandr -q|awk '/ connected/ {print $1}'")
;;     (connected (process-lines "bash" "-lc" connected-cmd))
;;     (primary (nth 0 connected))
;;     (other (nth 1 connected))
;;     (previous (delete-dups (seq-remove
;;                 'integerp
;;                 exwm-randr-workspace-output-plist))))
;;     (progn 
;;     (cond (other
;;     (progn (my-exwm-xrandr-config primary other)
;;         (my-exwm-xrandr-two-outputs primary other)))
;;     (t (progn (my-exwm-xrandr-config primary primary)
;;             (mapcar 'my-exwm-xrandr-off
;;                 (delete primary previous)))))
;;     (exwm-randr--refresh)
;;     (exwm--log "Display: %s refreshed." connected))))

;; (setq exwm-randr-screen-change-hook
;;     (lambda () (my-exwm-xrandr-hook)))

(setq exwm-randr-workspace-output-plist '(1 "Virtual1" 2 "Virtual2"))
(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
            "xrandr" nil "xrandr --output Virtual1 --left-of Virtual2 --auto")))
#+end_src

Enabling exwm
#+begin_src emacs-lisp
(exwm-randr-enable)
(exwm-enable)

(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src

Sending simulated keys to X windows
#+begin_src emacs-lisp
(setq exwm-input-prefix-keys
  '(?\C-x ?\C-u ?\C-h ?\M-x ?\M-& ?\M-: ?\s-d ?\s-m ?\s-r ?\s-s ?\s-q ?\H-l ?\C-w))
(push ?\C-w exwm-input-prefix-keys) 
#+end_src

#+begin_src emacs-lisp
(use-package desktop-environment)
#+end_src

End the execute only if EXWM block.
Close parens, then add to command switch.
#+begin_src emacs-lisp
))

(add-to-list 'command-switch-alist '("--start-exwm" . anerenv-load-exwm))
#+end_src

** Clean UI
Disabling the toolbar, the splash-screen, the menu-bar and the scroll-bar
#+begin_src emacs-lisp

(customize-set-variable 'inhibit-startup-screen t) ; no splash screen on start
(menu-bar-mode -1)   ; no menu bar
(when (display-graphic-p)
    (tool-bar-mode -1)   ; no tool bar with icons
    (scroll-bar-mode -1) ; no scroll bars
    (set-fringe-mode 0)
)
#+end_src

** Theme
   
#+begin_src emacs-lisp
;(use-package solarized-theme)
;(load-theme 'solarized-light t)

;(setq solarized-use-variable-pitch nil
;       solarized-height-minus-1 1.0
;       solarized-height-plus-1 1.0
;       solarized-height-plus-2 1.0
;       solarized-height-plus-3 1.0
;       solarized-height-plus-4 1.0)
#+end_src

** Modeline
   
#+begin_src emacs-lisp
;; (when (display-graphic-p)
;;     (use-package smart-mode-line
;;       :config
;;         (sml/setup)
;;     )


(use-package mini-modeline
    :config
    (mini-modeline-mode t)
)
#+end_src

Coloring the indicator based on evil state
Taken from [[https://github.com/Malabarba/smart-mode-line/issues/195][Here]]
#+begin_src emacs-lisp
;; Color the evil tag - colors taken from spaceline
(setq evil-normal-state-tag   (propertize " <N> " 'face '((:background "DarkGoldenrod2")))
        evil-emacs-state-tag    (propertize " <E> " 'face '((:background "SkyBlue2")))
        evil-insert-state-tag   (propertize " <I> " 'face '((:background "chartreuse3")))
        evil-replace-state-tag  (propertize " <R> " 'face '((:background "chocolate")))
        evil-motion-state-tag   (propertize " <M> " 'face '((:background "plum3")))
        evil-visual-state-tag   (propertize " <V> " 'face '((:background "gray")))
        evil-operator-state-tag (propertize " <O> " 'face '((:background "sandy brown"))))
#+end_src

** Which-Key

#+begin_src emacs-lisp
(use-package which-key
  :config
    (which-key-mode)
)
#+end_src

** Perspective
   
#+begin_src emacs-lisp
(use-package perspective
   :config
    (persp-mode 1)
    (setq persp-show-modestring 'nil)
)

(use-package persp-projectile
  :bind(:map projectile-command-map
    ("p" . projectile-persp-switch-project)
  )
)
#+end_src

** Tabs
   
#+begin_src emacs-lisp

;(setq-default tab-bar-button-margin 0)
;(setq tab-bar-mode 1)

#+end_src

** Active Window Background
   
#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(background-color . "LightYellow"))

#+end_src

#+begin_src emacs-lisp
(defun highlight-selected-window ()
    ;Walk through all buffers, set all other buffers to
    ;default background
    (walk-windows (lambda (w)
    (with-current-buffer (window-buffer w)
        (unless (eq w (selected-window))
        (progn
            (buffer-face-set 'default)
            ;(face-remap-remove-relative fringeface)
                )
        )
    )
    ))
    ;Finally, set current buffer background
    (buffer-face-set '(:background "PaleTurquoise1"))
    (if (minibuffer-window-active-p (selected-window))
        (buffer-face-set '(:background "PaleTurquoise1"))
        (buffer-face-set '(:background "LightYellow"))
    )
)
;(add-hook 'buffer-list-update-hook 'highlight-selected-window)
;(add-hook 'post-command-hook 'highlight-selected-window)
#+end_src

** Easy Prompt

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** General Keymaps
   
Setting these functions for window resizing so we can bind them
   
#+begin_src emacs-lisp
(defun set-window-width (n)
    (adjust-window-trailing-edge (selected-window) ( - n (window-width)) t))
(defun set-85-columns()
    (interactive)
    (set-window-width 85))
#+end_src
   
Setting of keybindings based on [[https://stackoverflow.com/questions/49853494/the-best-way-to-set-a-key-to-do-nothing][this]]

#+begin_src emacs-lisp
(defvar anerenv-global-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-h") 'windmove-left)
    (define-key map (kbd "M-l") 'windmove-right) ;Instead of downcase-word
    (define-key map (kbd "M-k") 'windmove-up) ;Instead of kill-sentence
    (define-key map (kbd "M-j") 'windmove-down) ;Instead of indent-new-comment-line
    (define-key map (kbd "M-<left>") 'windmove-left) ;Instead of mark-paragraph
    (define-key map (kbd "M-<right>") 'windmove-right) ;Instead of downcase-word
    (define-key map (kbd "M-<up>") 'windmove-up) ;Instead of kill-sentence
    (define-key map (kbd "M-<down>") 'windmove-down) ;Instead of indent-new-comment-line
    (define-key map (kbd "M-d M-d") 'delete-window) ;Instead of indent-new-comment-line
    (define-key map (kbd "s-d s-d") 'delete-window)
    (define-key map (kbd "M-d D") 'kill-buffer-and-window) ;Instead of indent-new-comment-line
    (define-key map (kbd "M-i") 'counsel-imenu) ;Instead of tab-to-tab-stop
    (define-key map (kbd "M-\\") 'split-window-horizontally) ;Instead of delete-horizontal-space
    (define-key map (kbd "M-\-") 'split-window-vertically) ;Instead of negative-argument
    (define-key map (kbd "M-d R") 'set-85-columns) ;Instead of indent-new-comment-line
    (define-key map (kbd "M-b") 'counsel-switch-buffer) ;Unset the org-mode map of "org-mark-element"
    (define-key map (kbd "M-<tab>") 'persp-next)
    (define-key map (kbd "s-<tab>") 'persp-next)
    (define-key map (kbd "M-`") 'persp-prev)
    (define-key map (kbd "M-n") 'persp-switch)
    (define-key map (kbd "C-SPC") 'toggle-input-method)
    (define-key map (kbd "M-p") 'projectile-command-map)
    map)
  "anerenv-global-minor-mode keymap.")

(define-minor-mode anerenv-global-minor-mode
  "A minor mode for anerenv global keyhmaps."
  :init-value t
  :lighter "anerenv")

(anerenv-global-minor-mode 1)
#+end_src

** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :config
    (diminish 'ivy-mode)
    (diminish 'undo-tree-mode)
    (diminish 'visual-line-mode)
    (diminish 'awk-mode)
    (diminish 'which-key-mode)
    (diminish 'mini-modeline-mode)
    (diminish 'eldoc-mode)
    (diminish 'yas-minor-mode)
    (diminish 'auto-revert-mode)
    (diminish 'buffer-face-mode)
    (diminish 'company-mode)
    (diminish 'flycheck-mode)
    (diminish 'anerenv-global-minor-mode)
)

#+end_src

